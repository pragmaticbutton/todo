openapi: 3.0.1

info:
  title: API for todo app #TODO
  version: 0.0.1

components:

  schemas:

    
    ###########################
    # Category schemas
    ###########################

    CreateCategoryIn:
      title: CreateCategory
      description: Request type for CreateCategory service.
      type: object
      properties:
        name:
          type: string
          description: Category name.
          maxLength: 50
          example: health
        description:
          type: string
          description: Category description.
          example: Category for health related tasks.
      required: [name]

    CategoryOut:
      title: CategoryOut
      description: Response type for category related services.
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Id of category.
          minimum: 1
          example: 69
        name:
          type: string
          description: Category name.
          maxLength: 50
          example: health
        description:
          type: string
          description: Category description.
          example: Category for health related tasks.
        created:
          type: string
          format: date-time
          description: Point in time when this category was created.
          example: "2023-06-05T11:11:11Z"
        last_changed:
          type: string
          format: date-time
          description: Point in time when this category was last modified.
          example: "2023-06-06T11:11:11Z"
      required: [id, name, created, last_changed]

    SearchCategoryOut:
      title: SearchCategoryOut
      description: Response type for SearchCategory service.
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryOut'

    UpdateCategoryIn:
      title: UpdateCategoryIn
      description: Request type for UpdateCategory service.
      properties:
        name:
          type: string
          description: Category name.
          minLength: 1
          maxLength: 50
          example: health
        description:
          type: string
          maxLength: 255
          description: Category description.
          example: Category for health related tasks.

    ###########################
    # Task schemas
    ###########################

    TaskPriority:
      title: TaskPriority
      type: string
      enum: [HIGH, MEDIUM, LOW]
      description: Priority of the task.
      example: LOW

    CreateTaskIn:
      title: CreateTaskIn
      description: Request type for CreateTask service.
      type: object
      properties:
        name: 
          type: string
          maxLength: 50
          description: Task name.
          example: Wash the dishes
        categoryId:
          type: integer
          format: int32
          description: Id of the category this tasks belongs.
          example: 23
        priority:
          $ref: '#/components/schemas/TaskPriority'
        description:
          type: string
          maxLength: 255
          description: Description of the task.
          example: The dishes must be washed.
      required: [name, categoryId, priority]

    TaskOut:
      title: TaskOut
      description: Resopnse type for task services.
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Unique identifier of a task.
        name: 
          type: string
          maxLength: 50
          description: Task name.
          example: Wash the dishes
        category_id:
          type: integer
          format: int32
          description: Id of the category this tasks belongs.
          example: 23
        priority:
          $ref: '#/components/schemas/TaskPriority'
        done:
          type: boolean
          description: Flag indicating whether the task is finished.
          example: false
        description:
          type: string
          maxLength: 255
          description: Description of the task.
          example: The dishes must be washed.
        created:
          type: string
          format: date-time
          description: Point in time when this task was created.
          example: "2023-06-05T11:11:11Z"
        last_changed:
          type: string
          format: date-time
          description: Point in time when this task was last modified.
          example: "2023-06-06T11:11:11Z"
      required: [id, name, category_id, priority, done, created, last_changed]   
    
    SearchTaskOut:
      title: SearchTaskOut
      description: Response type for SearchTask service.
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/TaskOut'

paths:
  
  /v1/category/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Category unique identifier.
        schema:
          type: string
    get:
      summary: Get category
      operationId: getCategory
      description: Get category by unique identifier.
      responses:
        "200": 
          description: Category successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryOut'
    
    delete:
      summary: Delete category
      operationId: deleteCategory
      description: Delete category by unique identifier.
      responses:
        "200": 
          description: Category successfully deleted.

    patch:
      summary: Update category
      operationId: updateCategory
      description: Update category.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryIn'
      responses:
        "200": 
          description: Category successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryOut'

  /v1/category:
    post:
      summary: Create category
      operationId: createCategory
      description: Create new category.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryIn'
      responses:
        "200": 
          description: Category successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryOut'
    
    get:
      summary: Search category
      operationId: searchCategory
      description: Search categories by various provided parameters.
      parameters:
      - name: name
        in: query
        required: false
        description: Category name. Supports wildcards (*).
        schema:
          type: string
      responses:
        "200": 
          description: Categories successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchCategoryOut'

  /v1/task:
    post:
      summary: Create task
      operationId: createTask
      description: Create new task.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskIn'
      responses:
        "200": 
          description: Task successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskOut'
    get:
      summary: Search task
      operationId: searchTask
      description: Search tasks by various provided parameters.
      parameters:
      - name: name
        in: query
        required: false
        description: Task name. Supports wildcards (*).
        schema:
          type: string
      - name: categoryId
        in: query
        required: false
        description: Category id.
        schema:
          type: integer
          format: int32
      - name: done
        in: query
        description: Indicator of if the task has been completed.
        schema:
          type: boolean
      - name: priority
        in: query
        required: false
        description: Priority of the task.
        schema:
          $ref: '#/components/schemas/TaskPriority'
      responses:
        "200": 
          description: Tasks successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchTaskOut'

  /v1/task/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Category unique identifier.
        schema:
          type: integer
          format: int32
    get:
      summary: Get task
      description: Get task by unique identifier.
      operationId: getTask
      responses:
        "200": 
          description: Task successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskOut'
    delete:
      summary: Delete task
      description: Delete task by unique identifier.
      operationId: deleteTask
      responses:
        "200": 
          description: Task successfully deleted.

  /v1/task/{id}/finish:
    parameters:
      - name: id
        in: path
        required: true
        description: Category unique identifier.
        schema:
          type: integer
          format: int32
    patch:
      summary: Finish task
      operationId: finishTask
      description: Finish task.
      responses:
        "200": 
          description: Task successfully finished.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskOut'